@page "/"

@using Microsoft.AspNetCore.Identity;

@inject IServiceProvider _serviceProvider;
@inject UserManager<Data.ApplicationUser> UserManager;
@inject AuthenticationStateProvider _authenticationStateProvider;

<PageTitle>Home</PageTitle>


@* @if (_isAuthenticated)
{
    <p class="authorized-message">You are authorized!</p>
    if (_isAdminRole)
    {
        <p class="authorized-admin">You are Admin!</p>
    }
    if (_isUserRole)
    {
        <p class="authorized-user">You are User!</p>
    }
}
else {
    <p class="unauthorized-message">You are not logged in!</p>
} *@
<AuthorizeView>
    <Authorized>
        <p class="authorized-message">You are authorized!</p>
    </Authorized>
    <NotAuthorized>
        <p class="unauthorized-message">You are not logged in!</p>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="Admin">
    <p class="authorized-admin">You are Admin!</p>
</AuthorizeView>

<AuthorizeView Roles="User">
    <p class="authorized-user">You are User!</p>
</AuthorizeView>


@code {
    public bool _isAuthenticated;
    public bool _isAdminRole;
    public bool _isUserRole;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authenticationState.User;
        _isAuthenticated = authUser.Identity.IsAuthenticated;
        _isAdminRole = authUser.IsInRole("Admin");
        _isUserRole = authUser.IsInRole("User");

        // await CreateUserRolesAsync("rasmusn686@hotmail.com", "User");
    }

    // public async Task CreateUserRolesAsync(string user, string role)
    // {
    //     var roleManager = _serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    //     var userManager = UserManager;

    //     var userRoleCheck = await roleManager.RoleExistsAsync(role);
    //     if (!userRoleCheck)
    //         await roleManager.CreateAsync(new IdentityRole(role));

    //     Data.ApplicationUser identityUser = await userManager.FindByEmailAsync(user);
    //     await userManager.AddToRoleAsync(identityUser, role);

    // }
}