@page "/"
@attribute [Authorize(Policy = "AuthenticatedUser")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using SikkerhedOgTest.Codes
@using SikkerhedOgTest.Data
@using SikkerhedOgTest.Models


@inject AsymmetriskEncryptionHandler _asymmetriskEncryptionHandler
@inject SymmetriskEncryptionHandler _symmetriskEncryptionHandler
@inject HashingHandler _hashingHandler

@inject TodoDbContext TodoDbContext
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="authorized-container">
    <div class="form-content">
<AuthorizeView>
    <Authorized Context="auth">
            <h4> Logged in as: @auth.User.Identity?.Name</h4>

                @if (!isCprVerified)
                {
                    @if (hasCpr)
                    {
                        <!-- CPR Verification Form -->
                        <EditForm Model="cprModel" OnValidSubmit="VerifyExistingCpr">
                            <div style="margin-bottom:20px;">
                                <label style="margin-bottom:20px;">CPR already registered. Input existing CPR:</label>
                                <br />
                                <InputText @bind-Value="inputCpr" class="form-control" aria-required="true" placeholder="1234567890" />
                            </div>
                            <button type="submit" class="w-100 btn btn-lg btn-primary">Verify CPR</button>
                        </EditForm>
                        @if (!string.IsNullOrWhiteSpace(errorMessage))
                        {
                            <p class="text-danger">@errorMessage</p>
                        }
                    }
                    else
                    {
                        <!-- CPR Registration Form -->
                        <EditForm Model="cprModel" OnValidSubmit="RegisterNewCpr">
                            <div style="margin-bottom:10px;">
                                <label style="margin-bottom:10px;">Register your CPR Number</label>
                                <br />
                                <InputText @bind-Value="inputCpr" />
                            </div>
                            <button type="submit" class="w-100 btn btn-lg btn-primary">Submit CPR</button>
                        </EditForm>
                        @if (!string.IsNullOrWhiteSpace(errorMessage))
                        {
                            <p class="text-danger">@errorMessage</p>
                        }
                    }
                    
                }
                else
                {
                    <!-- Todo Item Creation Form (Shown after CPR is verified or registered) -->
                    <EditForm Model="todoItem" OnValidSubmit="CreateTodoItem">
                        <div style="margin-bottom:20px;">
                            <label style="margin-bottom:10px; font-size: 20px;">Create Task:</label>
                            <br />
                            <InputText @bind-Value="inputTodoItem" class="form-control" aria-required="true" placeholder="Task Name" />
                        </div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Add Task</button>
                    </EditForm>
                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                        {
                            <p class="text-danger">@errorMessage</p>
                        }
                    @if (decryptedTodoItemList != null && decryptedTodoItemList.Any())
                    {
                        <main>
                            <ol class="gradient-list">
                                @foreach (var item in decryptedTodoItemList)
                                {
                                    <li>@item.TodoItemName</li>
                                }
                            </ol>
                        </main>
                        
                    }
                    else
                    {
                        <p>No tasks available.</p>
                    }
                }
    </Authorized>

        </AuthorizeView>
    </div>
</div>

<style>
    .authorized-container {
        
        width: fit-content;
        height: fit-content;
        margin: 0 auto;
        justify-content:center;
        align-content:center;
    }

    .form-content{
        text-align:center;
        width: 500px;
    }

    /*** EXTEND ***/
    
    /*** STYLE ***/
    



    ol.gradient-list > li, ol.gradient-list > li::before {
        box-shadow: 0rem 0.25rem 1rem rgba(0, 0, 0, 0.1), 0 0.5rem 1.125rem rgba(5, 75, 0, 0.05);
        }

    ol.gradient-list {
        counter-reset: gradient-counter;
        list-style: none;
        margin: 1.75rem 0;
        padding-left: 1rem;
    }

        ol.gradient-list > li {
            background: white;
            border-radius: 0 0.5rem 0.5rem 0.5rem;
            counter-increment: gradient-counter;
            margin-top: 1rem;
            min-height: 3rem;
            padding: 1rem 2rem 1rem 2rem;
            position: relative;
        }

            ol.gradient-list > li::before, ol.gradient-list > li::after {
                background: linear-gradient(135deg, #83e4e2 0%, #a2ed56 100%);
                border-radius: 1rem 1rem 0 1rem;
                content: '';
                height: 2.7rem;
                left: -1rem;
                overflow: hidden;
                position: absolute;
                top: -0.1rem;
                width: 2.7rem;
            }

            ol.gradient-list > li::before {
                background: linear-gradient(51deg, rgba(134,229,255,1) 0%, rgba(68,54,212,1) 100%);
                align-items: flex-end;
                content: counter(gradient-counter);
                color: white;
                display: flex;
                font: 900 1.5em/1 'Montserrat';
                justify-content: flex-end;
                padding: 0.125em 0.35em;
                z-index: 1;
            }

            @* ol.gradient-list > li:nth-child(10n+1):before {
                background: linear-gradient(135deg, rgba(162, 237, 86, 0.2) 0%, rgba(253, 220, 50, 0.2) 100%);
            }

            ol.gradient-list > li:nth-child(10n+2):before {
                background: linear-gradient(135deg, rgba(162, 237, 86, 0.4) 0%, rgba(253, 220, 50, 0.4) 100%);
            }

            ol.gradient-list > li:nth-child(10n+3):before {
                background: linear-gradient(135deg, rgba(162, 237, 86, 0.6) 0%, rgba(253, 220, 50, 0.6) 100%);
            }

            ol.gradient-list > li:nth-child(10n+4):before {
                background: linear-gradient(135deg, rgba(162, 237, 86, 0.8) 0%, rgba(253, 220, 50, 0.8) 100%);
            }

            ol.gradient-list > li:nth-child(10n+5):before {
                background: linear-gradient(135deg, rgba(162, 237, 86, 1) 0%, rgba(253, 220, 50, 1) 100%);
            }

            ol.gradient-list > li:nth-child(10n+6):before {
                background: linear-gradient(135deg, rgba(162, 237, 86, 0.8) 0%, rgba(253, 220, 50, 0.8) 100%);
            }

            ol.gradient-list > li:nth-child(10n+7):before {
                background: linear-gradient(135deg, rgba(162, 237, 86, 0.6) 0%, rgba(253, 220, 50, 0.6) 100%);
            }

            ol.gradient-list > li:nth-child(10n+8):before {
                background: linear-gradient(135deg, rgba(162, 237, 86, 0.4) 0%, rgba(253, 220, 50, 0.4) 100%);
            }

            ol.gradient-list > li:nth-child(10n+9):before {
                background: linear-gradient(135deg, rgba(162, 237, 86, 0.2) 0%, rgba(253, 220, 50, 0.2) 100%);
            }

            ol.gradient-list > li:nth-child(10n+10):before {
                background: linear-gradient(135deg, rgba(162, 237, 86, 0) 0%, rgba(253, 220, 50, 0) 100%);
            } *@

            ol.gradient-list > li + li {
                margin-top: 2rem;
            }
</style>



@code {
    private Cpr cprModel = new();                                               
    private Cpr? existingCpr = null;
    private string inputCpr;
    private bool hasCpr = false;
    private bool isCprMatch = false;
    private bool isCprVerified = false;
    private string? errorMessage;

    private TodoItem todoItem = new();
    private List<TodoItem> todoItemList = new();
    private List<TodoItem> decryptedTodoItemList = new(); 
    private string inputTodoItem;


    protected override async Task OnInitializedAsync()
    {
        // string textToEncrypt = "Rasmus";
        // string encryptedText = await _asymmetriskEncryptionHandler.AsymmetriskEncrypt(textToEncrypt);
        // string decryptedText = await _asymmetriskEncryptionHandler.AsymmetriskDecrypt(encryptedText);

        // string encryptedText = _symmetriskEncryptionHandler.Protect(textToEncrypt);
        // string decryptedText = _symmetriskEncryptionHandler.Unprotect(encryptedText);

        // string testToHash1 = "Rasmus";
        // string testToHash2 = "Rasmus";

        // string hashedValue1 = _hashingHandler.BCryptHashing(testToHash1);
        // bool hashedValue2 = _hashingHandler.BCryptVerify(testToHash2, hashedValue1);

        // bool isMatch = hashedValue1 == hashedValue2;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var username = user.Identity.Name;

        if (user.Identity.IsAuthenticated)
        {
            cprModel.Username = username;

            // Check if the user already has a CPR in the database
            existingCpr = await TodoDbContext.Cprs.FirstOrDefaultAsync(c => c.Username == username);

            if (existingCpr != null)
            {
                hasCpr = true;  // User already has a CPR in the database

            }
        }
        else
        {
            NavigationManager.NavigateTo("/Login");
        }
    }

    private async Task RegisterNewCpr()
    {
        if (string.IsNullOrWhiteSpace(inputCpr))
        {errorMessage = "Please enter a valid CPR."; return;}

        if (!hasCpr)
        {
            string hashedCpr = _hashingHandler.BCryptHashing(inputCpr);
            cprModel.CprNr = hashedCpr;

            await TodoDbContext.Cprs.AddAsync(cprModel);
            await TodoDbContext.SaveChangesAsync();
            isCprVerified = true;
            errorMessage = null;

            await LoadTodoItems();
            // Redirect after saving CPR
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task VerifyExistingCpr()
    {
        if (string.IsNullOrWhiteSpace(inputCpr))
        {errorMessage = "Please enter a valid CPR."; return;}
        // Verify the entered CPR number against the hashed value
        bool isCprValid = _hashingHandler.BCryptVerify(inputCpr, existingCpr.CprNr);

        if (isCprValid)
        {
            // CPR matches the one in the database
            isCprMatch = true;
            isCprVerified = true;
            errorMessage = null;
            await LoadTodoItems();
            NavigationManager.NavigateTo("/");


        }
        else
        {
            // CPR does not match, and shows an error message
            isCprMatch = false;
            errorMessage = "The entered CPR number does not match with user.";
            
        }
    }

    private async Task CreateTodoItem()
    {
        if (string.IsNullOrWhiteSpace(inputTodoItem))
        {errorMessage = "Task name cannot be empty!"; return;}

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var username = user.Identity.Name;
        var userCpr = await TodoDbContext.Cprs.FirstOrDefaultAsync(c => c.Username == username);

        if (userCpr != null)
        {

            todoItem = new TodoItem
                {
                    CprId = userCpr.Id, // Assign the CPR ID
                    TodoItemName = await _asymmetriskEncryptionHandler.AsymmetriskEncrypt(inputTodoItem) // Encrypt the task name
                };
         
            // Assign the CprId to the new TodoItem
            todoItem.CprId = userCpr.Id;

            // Save the new TodoItem to the database
            await TodoDbContext.TodoItems.AddAsync(todoItem);
            await TodoDbContext.SaveChangesAsync();
            await LoadTodoItems();
            inputTodoItem = string.Empty;
            errorMessage = null;
        }
        
        else errorMessage = "Could not find your Task list.";
        
    }

    

    private async Task LoadTodoItems()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var username = user.Identity.Name;

        // Find the user's CPR
        var userCpr = await TodoDbContext.Cprs.FirstOrDefaultAsync(c => c.Username == username);

        if (userCpr != null)
        {
            // Load the TodoItems for the current user's CPR
            todoItemList = await TodoDbContext.TodoItems
                .Where(t => t.CprId == userCpr.Id)
                .ToListAsync();

            decryptedTodoItemList.Clear();

            foreach (var item in todoItemList)
            {
                // New TodoItem with decrypted name, and add it to the new list
                var decryptedItem = new TodoItem
                {
                    Id = item.Id,
                    CprId = item.CprId,
                    TodoItemName = await _asymmetriskEncryptionHandler.AsymmetriskDecrypt(item.TodoItemName),
                };
                decryptedTodoItemList.Add(decryptedItem);
            }

        }
    }
}

